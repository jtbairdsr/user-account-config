" INITIALIZE PLUG {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                    INITIALIZE PLUG                                                   ""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	call plug#begin()

	" Plugins ----------------------------------------------------------------------------------------------------------
	Plug 'airblade/vim-rooter'
	Plug 'bronson/vim-visual-star-search'
	Plug 'bronson/vim-trailing-whitespace'
	Plug 'chrisbra/Colorizer'
	Plug 'chrisbra/csv.vim'
	Plug 'edkolev/promptline.vim'
	Plug 'geoffharcourt/vim-matchit'
	Plug 'freitass/todo.txt-vim'
	Plug 'godlygeek/tabular'
	Plug 'honza/vim-snippets'
	Plug 'junegunn/vim-easy-align'
	Plug 'ctrlpvim/ctrlp.vim'
	Plug 'leafgarland/typescript-vim'
	Plug 'Lokaltog/vim-easymotion'
	Plug 'majutsushi/tagbar'
	Plug 'maksimr/vim-karma'
	Plug 'marijnh/tern_for_vim'
	Plug 'michaeljsmith/vim-indent-object'
	Plug 'neitanod/vim-clevertab'
	Plug 'othree/javascript-libraries-syntax.vim'
	Plug 'pangloss/vim-javascript'
	Plug 'rking/ag.vim'
	Plug 'scrooloose/syntastic'
	Plug 'scrooloose/nerdcommenter'
	Plug 'severin-lemaignan/vim-minimap'
	Plug 'Shougo/vimshell.vim'
	Plug 'Shougo/vimproc.vim'
	Plug 'sjl/gundo.vim'
	Plug 'Townk/vim-autoclose'
	Plug 'tpope/vim-fugitive'
	Plug 'tpope/vim-sleuth'
	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-abolish'
	Plug 'tpope/vim-commentary'
	Plug 'tpope/vim-git'
	Plug 'tpope/vim-pathogen'
	Plug 'tpope/vim-scriptease'
	Plug 'tpope/vim-sensible'
	Plug 'tpope/vim-speeddating'
	Plug 'tyru/open-browser.vim'
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
	Plug 'vim-scripts/a.vim'
	Plug 'vim-scripts/closetag.vim'
	Plug 'vim-scripts/text-object-left-and-right'
	Plug 'vim-scripts/YankRing.vim'
	Plug 'xolox/vim-misc'
	Plug 'Yggdroot/indentLine'
	Plug 'leshill/vim-json'
	Plug 'justinmk/vim-sneak'
	Plug 'majutsushi/tagbar'
	Plug 'mhinz/vim-signify'
	Plug 'plasticboy/vim-markdown'
	Plug 'ryanoasis/vim-devicons'



	" Color schemes ----------------------------------------------------------------------------------------------------
	Plug 'altercation/vim-colors-solarized'

	call plug#end()
" }}}

" CUSTOMIZATIONS I INHERITED FROM DAD {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                          CUSTOMIZATIONS I INHERITED FROM DAD                                         "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	set t_AB=[%?%p1%{8}%<%t%p1%{40}%+%e%p1%{92}%+%;%dm
	set t_AF=[%?%p1%{8}%<%t%p1%{30}%+%e%p1%{82}%+%;%dm
	se wm=0 terse ws sm ai sw=3 ts=3 history=9999 viminfo='1000,f1,\"500,:9999,/9999 number
	map  :n!
	map  :rew!
	function! CleverTab()"{{{
		if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
			return "\<Tab>"
		else
			return "\<C-N>"
	endfunction"}}}
	inoremap <Tab> <C-R>=CleverTab()<CR>
	"hi Comment ctermfg=2*
	hi Identifier ctermfg=5
	hi Statement ctermfg=4
	hi Type cterm=underline ctermfg=4
	hi PreProc ctermfg=4
	hi Special ctermfg=0
	hi Constants cterm=underline ctermfg=1
" }}}

" MY CUSTOMIZATIONS {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                                   MY CUSTOMIZATIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	" Plugin Helpers {{{
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	"                                                 Plugin Helpers                                                   "
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

	nnoremap <C-p> :CtrlP<CR>
	let g:ctrlp_working_path_mode = 'ra'
	let g:ctrlp_root_markers = ['package.json']
	set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
	set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
	let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
	let g:ctrlp_custom_ignore = {
		\ 'dir':  '\v[\/]\.(git|hg|svn)$',
		\ 'file': '\v\.(exe|so|dll)$',
		\ 'link': 'some_bad_symbolic_links',
		\ }
	let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

		" Airline {{{
			" bundle name: vim-airline ---------------------------------------------------------------------------------
			" bundle name: vim-airline-thmes ---------------------------------------------------------------------------
			let g:airline_powerline_fonts = 1
			let g:airline_theme                                   = 'solarized'
			let g:airline_solarized_bg                            = 'light'
			let g:airline#extensions#tabline#enabled              = 1
			let g:airline#extensions#tabline#left_sep             = ' '
			let g:airline#extensions#tabline#left_alt_sep         = '|'
			let g:airline#extensions#whitespace#mixed_indent_algo = 1
		" }}}End Airline

		" Colors-Solarized {{{
			" bundle name: vim-colors-solarized ------------------------------------------------------------------------
			set background=light               " default to a nice light background
			colorscheme solarized              " a nice color scheme
			map <F1> :set background=light<CR> " create a mapping that lets me change from light to dark on the fly
			map <F2> :set background=dark<CR>  " create a mapping that lets me change from light to dark on the fly
		" }}}End Colors-Solarized

		" DevIcons {{{
			" bundle name: vim-devicons
			set encoding=utf8
			set guifont=Monoid\ Nerd\ Font:h12
		" }}} End DevIcons

		" EasyAlign {{{
			" bundle name: vim-devicons
			" Start intractive EasyAlign in visual mode (e.g vipga)
			xmap ga <Plug>(EasyAlign)
			" Start interactive EasyAlign for a motion/text object (e.g gaip)
			nmap ga <Plug>(EasyAlign)
		" }}} End EasyAlign

		" IndentLine {{{
			" bundle name: indentLine ----------------------------------------------------------------------------------
			" mark leading spaces to distiguish them from tabs
			let g:indentLine_leadingSpaceEnabled = 1   " mark leading spaces
			let g:indentLine_leadingSpaceChar    = ' ' " char to mark leading spaces
			let g:indentLine_char                = ' ' " char to mark leading spaces
			set list lcs=tab:\î˜¡\                       " show tabs
		" }}}End IndentLine

		" MiniMap {{{
			" bundle name: vim-minimap ---------------------------------------------------------------------------------
			let g:mimimap_highlight='Visual'
		" }}}

		" NERD-Commenter {{{
			" bundle name: nerdcommenter url(https://github.com/scrooloose/nerdcommenter) ------------------------------
			filetype plugin on
			imap <F4> <Plug>NERDCommenterInsert                                    " map <F4> to start a new comment while in insert mode
			noremap <D-/> <Plug>NERDComToggleComment
			let g:NERDSpaceDelims       = 1                                        " Add spaces after comment delimiters by default
			let g:NERDCompactSexyComs   = 1                                        " Use compact syntax for prettified multi-line comments
			let g:NERDDefaultAlign      = 'left'                                   " Align line-wise comment delimiters flush left instead of following code indentation
			let g:NERDAltDelims_java    = 1                                        " Set a language to use its alternate delimiters by default
			let g:NERDCustomDelimiters  = { 'c': { 'left': '/**','right': '*/' } } " Add your own custom formats or override the defaults
			let g:NERDCommentEmptyLines = 1                                        " Allow commenting and inverting empty lines (useful when commenting a region)
		" }}}End NERD-Commenter

		" PromptLine {{{
			" bundle name: promptline ----------------------------------------------------------------------------------
			let g:promptline_powerline_symbols = 1
			let g:promptline_preset = {
				\'a':    [ promptline#slices#host() ],
				\'b':    [ promptline#slices#user() ],
				\'c':    [ promptline#slices#cwd() ],
				\'y':    [ promptline#slices#vcs_branch() ],
				\'warn': [ promptline#slices#last_exit_code() ]}
		" }}}End PromptLine

		" Syntastic {{{
			" bundle name: syntastic ----------------------------------------------------------------------------------
			set statusline+=%#warningmsg#
			set statusline+=%{SyntasticStatuslineFlag()}
			set statusline+=%*

			let g:syntastic_always_populate_loc_list = 1
			let g:syntastic_auto_loc_list            = 1
			let g:syntastic_check_on_open            = 1
			let g:syntastic_check_on_wq              = 0
			let g:syntastic_javascript_checkers      = ['eslint']
			let g:syntastic_html_checkers            = ['htmllint']
			let g:syntastic_sass_checkers            = ['scsslint']

			function! FindConfig(prefix, what, where)
				let cfg = findfile(a:what, escape(a:where, ' ') . ';')
				return cfg !=# '' ? ' ' . a:prefix . ' ' . shellescape(cfg) : ''
			endfunction

			autocmd FileType javascript let b:syntastic_javascript_eslint_args =
				\ get(g:, 'syntastic_javascript_eslint_args', '') .
				\ FindConfig('-c', '.eslintrc', expand('<afile>:p:h', 1))

			" function! ToggleErrors {{{
			function! ToggleErrors()
				if empty(filter(tabpagebuflist(), 'getbufvar(v:val, "&buftype") is# "quickfix"'))
					" No location/quickfix list shown, open syntastic error location panel
					Errors
				else
					lclose
				endif
			endfunction
			nnoremap <Silent> <F12> :<C-u>call ToggleErrors()<CR>
			" }}}End ToggleErrors
		" }}}End Syntastic

		" Tabular {{{
			" bundle name: tabular -------------------------------------------------------------------------------------
			nmap ,a= :Tabularize /=<CR>    " a normal mode shortcut to align on '='
			vmap ,a= :Tabularize /=<CR>    " a visual mode shortcut to align on '='
			nmap ,a" :Tabularize /"<CR>    " a normal mode shortcut to align on ' " '
			vmap ,a" :Tabularize /"<CR>    " a visual mode shortcut to align on ' " '
			nmap ,a: :Tabularize /:\zs<CR> " a normal mode shortcut to align on ':\zs'
			vmap ,a: :Tabularize /:\zs<CR> " a visual mode shortcut to align on ':\zs'
			inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
			" realtime table builder based on '|'"{{{
			function! s:align()
				let p = '^\s*|\s.*\s|\s*$'
				if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
					let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
					let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
					Tabularize/|/l1
					normal! 0
					call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
				endif
			endfunction"}}}
		" }}}End Tabular

		" Visual-Star-Search {{{
			" bundle name: vim-visual-star-search ----------------------------------------------------------------------
			" use ag for recursive searching so we don't find 10,000 useless hits inside node_modules
			nnoremap <leader>* :call ag#Ag('grep', '--literal ' . shellescape(expand("<cword>")))<CR>
			vnoremap <leader>* :<C-u>call VisualStarSearchSet('/', 'raw')<CR>:call ag#Ag('grep', '--literal ' . shellescape(@/))<CR>
		" }}}End Visual-Star-Search
	" }}} End Plugin Helpers

	" Key Remapping {{{
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	"                                                  Key Remapping                                                   "
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
		nnoremap <Leader>ev :vsp $MYVIMRC<CR>    " edit vimrc
		nnoremap <Leader>ez :vsp ~/.zshrc<CR>    " edit zshrc
		nnoremap <Leader>sv :source $MYVIMRC<CR> " reload vimrc
		nnoremap <Leader>s :mksession<CR>        " save session
		nnoremap <Leader><Space> :nohlsearch<CR> " turn of search highlight
		nnoremap gV `[v`]                        " highlight last inserted text
	" }}}End Key Remapping

	" VIM Appearance {{{
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	"                                                  VIM Appearance                                                  "
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
		set encoding=utf-8                                      " declare the encoding
		set guifont=Monoid\ Nerd\ Font                          " this forces the needed font for some of the fancyness
		syntax enable                                           " turn on syntax highlighting

		" au BufNewFile,BufRead *.b,*/*BP*/* setf jbase         " enable syntax highlighting for jBASE (Pick) Basic

		" change cursor on insert mode if we can
		let &t_SI = "\<Esc>]50;CursorShape=1\x7"
		let &t_SR = "\<Esc>]50;CursorShape=2\x7"
		let &t_EI = "\<Esc>]50;CursorShape=0\x7"

		" highlight the 120th column
		if exists('+colorcolumn')
			" In Vim >= 7.3, also highlight columns 120+
			let &colorcolumn="120,".join(range(160,500),",")
		else
			" fallback for Vim < v7.3
			autocmd BufWinEnter * let w:m2=matchadd('ErrorMsg','\%>120v.\+', -1)
		endif

		hi Folded term=bold cterm=bold
		set fillchars="fold: "                                  " remove the dashes from folds
	" }}}End VIM Appearance

	" VIM Behavior {{{
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	"                                                   VIM Behavior                                                   "
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
		filetype indent on             " load filetype-specific indent files
		set wildmenu                   " visual autocomplete for command menu
		set lazyredraw                 " redraw the screen only when we need to
		set showmatch                  " highlight matching {}[]()
		set incsearch                  " show search results as I type
		set hlsearch                   " highlight all search results
		set noexpandtab                " prevent vi from expanding tabs to spaces
		set copyindent                 " make vi maintain indentation level automatically
		set cinoptions=(0,u0,U0        " make indenting of parameters look really nice
		set preserveindent             " make vi use the same indent stucture as on the previous line
		set shiftwidth=4               " use 4 spaces for each step of autoindent
		set tabstop=4                  " make tabs count for 4 spaces
		set breakindent                " make sure Vim will wrap indented lines correctly
		set hidden                     " don't unload buffer when switching away
		set backspace=indent,eol,start " sane backspace
		set mouse=a                    " enable mouse for all modes settings
		set mousemodel=popup           " right-click pops up context menu
		set ruler                      " show cursor position in status bar
		set number                     " show absolute line number of the current line
		set scrolloff=10               " scroll the window so we can always see 10 lines around the cursor
		set cursorline                 " highlight the current line
		set cursorcolumn               " highlight the current column
		set printoptions=paper:letter  " user letter as the print output paper format
		set shell=/bin/zsh             " define the shell to match my system shell
		set foldlevelstart=10          " open most folds by default
		set foldmethod=syntax          " fold based on indent level
		set modeline                   " turns on modelines
		set modelines=5                " tell vim to look at a comment on the last line of a file for file specific settings
		set showcmd                    " show command in bottom bar
		command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!
		autocmd BufWritePre * :%s/\s\+$//e " clear all trailing whitespace on save
		" Change color scheme to dark at night but light during the day
		let hour = strftime("%H")
		if hour >= 6 && hour < 18
			set background=light
		else
			set background=dark
		endif
		colorscheme solarized
	" }}} End Vim Behavior

	" VIM Functions {{{
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	"                                                  VIM Functions                                                   "
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
		" Return indent (all whitespace at start of a line), converted from
		" tabs to spaces if what = 1, or from spaces to tabs otherwise.
		" When converting to tabs, result has no redundant spaces.
		function! Indenting(indent, what, cols)
			let spccol = repeat(' ', a:cols)
			let result = substitute(a:indent, spccol, '\t', 'g')
			let result = substitute(result, ' \+\ze\t', '', 'g')
			if a:what == 1
				let result = substitute(result, '\t', spccol, 'g')
			endif
			return result
		endfunction

		" Convert whitespace used for indenting (before first non-whitespace).
		" what = 0 (convert spaces to tabs), or 1 (convert tabs to spaces).
		" cols = string with number of columns per tab, or empty to use 'tabstop'.
		" The cursor position is restored, but the cursor will be in a different
		" column when the number of characters in the indent of the line is changed.
		function! IndentConvert(line1, line2, what, cols)
			let savepos = getpos('.')
			let cols = empty(a:cols) ? &tabstop : a:cols
			execute a:line1 . ',' . a:line2 .  's/^\s\+/\=Indenting(submatch(0), a:what, cols)/e'
			call histdel('search', -1)
			call setpos('.', savepos)
		endfunction
		command! -nargs=? -range=% Space2Tab call IndentConvert(<line1>,<line2>,0,<q-args>)
		command! -nargs=? -range=% Tab2Space call IndentConvert(<line1>,<line2>,1,<q-args>)
		command! -nargs=? -range=% RetabIndent call IndentConvert(<line1>,<line2>,&et,<q-args>''
	" }}}
" }}}

" vim:foldmethod=marker:foldlevel=0
